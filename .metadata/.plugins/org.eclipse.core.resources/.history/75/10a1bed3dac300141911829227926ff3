package reductions

import scala.annotation._
import org.scalameter._
import common._


object ParallelParenthesesBalancing {

  @volatile var seqResult = false

  @volatile var parResult = false

  val standardConfig = config(
    Key.exec.minWarmupRuns -> 40,
    Key.exec.maxWarmupRuns -> 80,
    Key.exec.benchRuns -> 120,
    Key.verbose -> true
  ) withWarmer(new Warmer.Default)

  /** Returns `true` iff the parentheses in the input `chars` are balanced.
   */
  def balance(chars: Array[Char]): Boolean = {
    def parToInt(c: Char): Int ={
      if(c == '(') 1
      else if(c == ')') -1
      else 0
    }
    
    def balanceList(chars: List[Char], acc: Int): Boolean = {
      if(acc == 0 && chars.isEmpty) true
      else if (acc < 0 || chars.isEmpty) false 
      else balanceList(chars.tail, acc + parToInt(chars.head))
    }
    
    balanceList(chars.toList, 0)
  }

  /** Returns `true` iff the parentheses in the input `chars` are balanced.
   */
  def parBalance(chars: Array[Char], threshold: Int): Boolean = {
    
//    def traverse(from: Int, until: Int, : Int, _???_: Int): ???
    
    
    
    
    ???
  }

  // For those who want more:
  // Prove that your reduction operator is associative!

  def main(args: Array[String]): Unit = {
    val length = 100000000
    val chars = new Array[Char](length)
    val threshold = 10000
    val seqtime = standardConfig measure {
      seqResult = balance(chars)
    }
    println(s"sequential result = $seqResult")
    println(s"sequential balancing time: $seqtime ms")

    val fjtime = standardConfig measure {
      parResult = parBalance(chars, threshold)
    }
    println(s"parallel result = $parResult")
    println(s"parallel balancing time: $fjtime ms")
    println(s"speedup: ${seqtime / fjtime}")
  }

}
